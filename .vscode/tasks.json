{
    "tasks": [
        {
            "label": "Build C Program",
            "type": "shell",
            "command": "gcc",
            "args": [
                "-Wall",
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}/../build/${fileBasenameNoExtension}.out"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": "build",
            "detail": "with -Wall, -g and -o flags."
        },
        {
            "label": "Run Program",
            "type": "shell",
            "command": "cd ${fileDirname}/../build && ./${fileBasenameNoExtension}.out",
            "group": "build",
            "presentation": {
                "reveal": "always",
                "panel": "new"
            },
            // "options": {
            //     "externalTerminal": true
            // },
            "detail": "without any arguments passed"
        },
        {
            "label": "Build pthread C Program",
            "type": "shell",
            "command": "gcc",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}/../build/${fileBasenameNoExtension}.out",
                "-lpthread"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": "build",
            "detail": "Using flag -lpthread."
        },
        {
            "label": "C/C++: g++ build active file (with -lm)",
            "type": "shell",
            "command": "g++",
            "args": [
                "-g",
                "${file}",
                "-o",
                "${fileDirname}/../build/${fileBasenameNoExtension}.out",
                "-lm"
            ],
            "group": "build",
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "detail": "-lm flag needed for math.h."
        },
        {
            "label": "Build Static Library",
            "type": "shell",
            "command": "make",
            "args": [
                "-C",
                "${workspaceFolder}/archive_lib",
                "all"
            ],
            "group": "build",
            "problemMatcher": {
                "owner": "cpp",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}/archive_lib"
                ],
                "pattern": {
                    "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "severity": 4,
                    "message": 5
                }
            },
            "detail": "Build a static archive library of all C files in archive_lib folder"
        },
        {
            "label": "Build C file using Archive Lib",
            "type": "shell",
            "command": "gcc",
            "args": [
                "${file}",
                "-o",
                "${fileDirname}/../build/${fileBasenameNoExtension}.out",
                "-L${workspaceFolder}/archive_lib",
                "-lmylib"
            ],
            "group": "build",
            "problemMatcher": {
                "owner": "cpp",
                "fileLocation": [
                    "relative",
                    "${workspaceFolder}/archive_lib"
                ],
                "pattern": {
                    "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "severity": 4,
                    "message": 5
                }
            },
            "detail": "libmylib.a at archive_lib"
        },
        {
            "label": "Build Shared Library",
            "type": "shell",
            "command": "make",
            "args": [
                "-C",
                "${workspaceFolder}/shared_lib"
            ],
            "options": {
                "cwd": "${workspaceFolder}/shared_lib"
            },
            "group": "build",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            }
        },
        {
            "label": "Build C File using Shared Lib",
            "type": "shell",
            "command": "gcc",
            "args": [
                "${file}",
                "-o",
                "${fileDirname}/../build/${fileBasenameNoExtension}.out",
                "-I${workspaceFolder}/include",
                "-L${workspaceFolder}/shared_lib",
                "-lmylib",
                "-Wl,-rpath=${workspaceFolder}/shared_lib"
            ],
            "group": "build",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            }
        },
        {
            "label": "Build C Project with Makefile",
            "type": "shell",
            "command": "make",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "reveal": "always",
                "panel": "new"
            },
            "options": {
                "cwd": "${fileDirname}/../"
              }
        },
        {
            "label": "Clean C project with Makefile",
            "type": "shell",
            "command": "make",
            "args": [
                "clean"
            ],
            "group": "build",
            "presentation": {
                "reveal": "always",
                "panel": "dedicated"
            },
            "options": {
                "cwd": "${fileDirname}/../"
              }
        },
        {
            "label": "Run Project Makefile",
            "type": "shell",
            "command": "cd ${fileDirname}/../build && ./a.out",
            "group": "build",
            "presentation": {
                "reveal": "always",
                "panel": "new"
            }
        },
        {
            "label": "Run with Valgrind",
            "type": "shell",
            "command": "valgrind",
            "args": [
                "--tool=memcheck",
                "${fileDirname}/../build/${fileBasenameNoExtension}.out"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "detail": "Valgrind a memory check tool"
        },
        {
            "label": "Make File Executable",
            "type": "shell",
            "command": "chmod",
            "args": [
                "+x",
                "${fileDirname}/../build/${fileBasenameNoExtension}.out",
                "-s"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            }
        },
        {
            "label": "Build ncurses Program",
            "type": "shell",
            "command": "gcc",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-lncurses",
                "-o",
                "${fileDirname}/../build/${fileBasenameNoExtension}.out"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": "build",
            "detail": "Run the executable."
        },
        {
            "label": "Run Program in Background",
            "type": "shell",
            "command": "cd ${fileDirname}/../build && ./${fileBasenameNoExtension}.out &",
            "group": "build",
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            // "options": {
            //     "externalTerminal": true
            // }
        },
        {
            "label": "Build FreeRTOS Project",
            "type": "shell",
            "command": "cd ${fileDirname}/../ && make",
            "group": "build",
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            // "options": {
            //     "externalTerminal": true
            // }
        },
        {
            "label": "Clean FreeRTOS Project",
            "type": "shell",
            "command": "cd ${fileDirname}/../ && make clean",
            "group": "build",
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            // "options": {
            //     "externalTerminal": true
            // }
        },
        {
            "label": "Run FreeRTOS Project",
            "type": "shell",
            "command": "cd ${fileDirname}/../ && ./FreeRTOS-Sim",
            "group": "build",
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            },
            // "options": {
            //     "externalTerminal": true
            // }
        },
        {
            "label": "Build mbedtls C program",
            "type": "shell",
            "command": "gcc",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "-I/workspaces/docker_c/mbedtls/examples/common",
                "${file}",
                "/workspaces/docker_c/mbedtls/examples/common/circular_buffer_for_ssl_read.c",
                "-o",
                "${fileDirname}/../build/${fileBasenameNoExtension}.out",
                "-lmbedtls",
                "-lmbedx509",
                "-lmbedcrypto"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": "build",
            "detail": "Using mbedtls lib."
        },
    ],
    "version": "2.0.0"
}
